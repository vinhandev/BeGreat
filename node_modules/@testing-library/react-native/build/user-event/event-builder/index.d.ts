/// <reference types="jest" />
export declare const EventBuilder: {
    Common: {
        touch: () => {
            persist: jest.Mock<any, any, any>;
            currentTarget: {
                measure: jest.Mock<any, any, any>;
            };
            nativeEvent: {
                changedTouches: never[];
                identifier: number;
                locationX: number;
                locationY: number;
                pageX: number;
                pageY: number;
                target: number;
                timestamp: number;
                touches: never[];
            };
        };
        responderGrant: () => {
            dispatchConfig: {
                registrationName: string;
            };
            persist: jest.Mock<any, any, any>;
            currentTarget: {
                measure: jest.Mock<any, any, any>;
            };
            nativeEvent: {
                changedTouches: never[];
                identifier: number;
                locationX: number;
                locationY: number;
                pageX: number;
                pageY: number;
                target: number;
                timestamp: number;
                touches: never[];
            };
        };
        responderRelease: () => {
            dispatchConfig: {
                registrationName: string;
            };
            persist: jest.Mock<any, any, any>;
            currentTarget: {
                measure: jest.Mock<any, any, any>;
            };
            nativeEvent: {
                changedTouches: never[];
                identifier: number;
                locationX: number;
                locationY: number;
                pageX: number;
                pageY: number;
                target: number;
                timestamp: number;
                touches: never[];
            };
        };
        focus: () => {
            nativeEvent: {
                target: number;
            };
        };
        blur: () => {
            nativeEvent: {
                target: number;
            };
        };
    };
    ScrollView: {
        scroll: (offset?: import("./scroll-view").ContentOffset) => {
            nativeEvent: {
                contentInset: {
                    bottom: number;
                    left: number;
                    right: number;
                    top: number;
                };
                contentOffset: {
                    y: number;
                    x: number;
                };
                contentSize: {
                    height: number;
                    width: number;
                };
                layoutMeasurement: {
                    height: number;
                    width: number;
                };
                responderIgnoreScroll: boolean;
                target: number;
                velocity: {
                    y: number;
                    x: number;
                };
            };
        };
    };
    TextInput: {
        change: (text: string) => {
            nativeEvent: {
                text: string;
                target: number;
                eventCount: number;
            };
        };
        keyPress: (key: string) => {
            nativeEvent: {
                key: string;
            };
        };
        submitEditing: (text: string) => {
            nativeEvent: {
                text: string;
                target: number;
            };
        };
        endEditing: (text: string) => {
            nativeEvent: {
                text: string;
                target: number;
            };
        };
        selectionChange: ({ start, end }: import("../utils").TextRange) => {
            nativeEvent: {
                selection: {
                    start: number;
                    end: number;
                };
            };
        };
        textInput: (text: string, previousText: string) => {
            nativeEvent: {
                text: string;
                previousText: string;
                range: {
                    start: number;
                    end: number;
                };
                target: number;
            };
        };
        contentSizeChange: ({ width, height }: import("../utils").ContentSize) => {
            nativeEvent: {
                contentSize: {
                    width: number;
                    height: number;
                };
                target: number;
            };
        };
    };
};
